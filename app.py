# -*- coding: utf-8 -*-
import os
import sys
import requests
import json
from flask import Flask, request

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Railway
os.environ.setdefault('PYTHONIOENCODING', 'utf-8')

app = Flask(__name__)
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("Environment variable TELEGRAM_BOT_TOKEN is not set")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è epay API
EPAY_API_URL = os.getenv("EPAY_API_URL", "https://infopayments.click/api/request/requisites")
EPAY_API_KEY = os.getenv("EPAY_API_KEY", "754fc9b3bb03cb719d76a18d8c83dcfd2d7758bc595585002c10355a415143d9")
BASE_URL = os.getenv("BASE_URL", "https://your-app-name.up.railway.app")

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–µ—Ä—Å–∏—è Railway - –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"

@app.route("/callback", methods=["POST"])
def epay_callback():
    try:
        update = request.get_json(silent=True) or {}
        app.logger.info(f"EPay callback received: {update}")
        
        if update.get('status') == 'successful_payment':
            transaction_id = update.get('transaction_id')
            if transaction_id:
                handle_successful_payment(transaction_id)
            return 'success', 200
        else:
            return 'fail', 200
            
    except Exception as e:
        app.logger.error(f"Error processing epay callback: {e}")
        return 'fail', 500

@app.route("/success")
def payment_success():
    return "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"

@app.route("/fail")
def payment_fail():
    return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞!"

@app.route(f"/webhook/{TOKEN}", methods=["POST"])
def webhook():
    print("=== WEBHOOK CALLED ===")
    app.logger.info("=== WEBHOOK CALLED ===")
    
    update = request.get_json(silent=True) or {}
    print(f"Update: {update}")
    app.logger.info(f"Update: {update}")
    
    message = update.get("message") or update.get("edited_message") or {}
    chat = message.get("chat") or {}
    chat_id = chat.get("id")
    text = message.get("text")

    print(f"Chat ID: {chat_id}, Text: {text}")
    app.logger.info(f"Chat ID: {chat_id}, Text: {text}")

    if not (chat_id and text):
        print("No chat_id or text, ignoring")
        app.logger.info("No chat_id or text, ignoring")
        return "ignored", 200

    try:
        if text.startswith('/'):
            print(f"Handling command: {text}")
            app.logger.info(f"Handling command: {text}")
            handle_command(chat_id, text)
        else:
            print(f"Handling amount input: {text}")
            app.logger.info(f"Handling amount input: {text}")
            handle_amount_input(chat_id, text)
    except Exception as e:
        print(f"Exception in webhook: {e}")
        app.logger.exception("Failed to send message")

    return "ok", 200

def handle_command(chat_id, command):
    print(f"Command handler: {command}")
    app.logger.info(f"Command handler: {command}")
    
    if command == '/start':
        print("Sending start message")
        app.logger.info("Sending start message")
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É")
    
    elif command == '/payment':
        print("Sending payment message")
        app.logger.info("Sending payment message")
        try:
            payment_data = get_payment_credentials_from_epay()
            if payment_data:
                payment_text = format_payment_credentials_from_epay(payment_data)
            else:
                payment_text = get_static_payment_credentials()
            
            send_message(chat_id, payment_text)
        except Exception as e:
            app.logger.error(f"Error getting payment credentials: {e}")
            send_message(chat_id, get_static_payment_credentials())
    
    elif command == '/help':
        print("Sending help message")
        app.logger.info("Sending help message")
        help_text = """‚ùì –ü–û–ú–û–©–¨:

/payment - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        send_message(chat_id, help_text)
    
    else:
        print("Unknown command")
        app.logger.info("Unknown command")
        send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

def handle_amount_input(chat_id, amount_text):
    print(f"Amount input handler: {amount_text}")
    app.logger.info(f"Amount input handler: {amount_text}")
    
    try:
        amount = float(amount_text.replace(',', '.'))
        send_message(chat_id, "‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã...")
        
        payment_data = get_payment_credentials_from_epay(amount)
        
        if payment_data and not payment_data.get('error_desc'):
            save_order_to_file(payment_data, chat_id, amount)
            payment_text = format_payment_credentials_from_epay(payment_data)
            send_message(chat_id, payment_text)
            send_message(chat_id, "‚è∞ –ù–∞ –æ–ø–ª–∞—Ç—É –¥–∞–µ—Ç—Å—è 20 –º–∏–Ω—É—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
        else:
            error_msg = payment_data.get('error_desc', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤') if payment_data else '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤'
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞! {error_msg}")
            
    except ValueError:
        send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50)")
    except Exception as e:
        app.logger.error(f"Error handling amount input: {e}")
        send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def send_message(chat_id, text):
    print(f"Sending message to {chat_id}: {text}")
    app.logger.info(f"Sending message to {chat_id}: {text}")
    
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    
    data = {
        "chat_id": chat_id, 
        "text": text,
        "parse_mode": "HTML"
    }
    
    try:
        response = requests.post(url, json=data, timeout=10)
        print(f"Telegram API response: {response.status_code}")
        app.logger.info(f"Telegram API response: {response.status_code}")
        
        if response.status_code != 200:
            print(f"Telegram API error: {response.text}")
            app.logger.error(f"Telegram API error: {response.text}")
    except Exception as e:
        print(f"Error sending message: {e}")
        app.logger.error(f"Error sending message: {e}")

def save_order_to_file(payment_data, chat_id, amount):
    try:
        from datetime import datetime
        order_data = [
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            payment_data.get('order_id', 'N/A'),
            str(chat_id),
            str(amount)
        ]
        
        with open("orders.txt", "a", encoding="utf-8") as f:
            f.write("|".join(order_data) + "\n")
            
    except Exception as e:
        app.logger.error(f"Error saving order to file: {e}")

def get_payment_credentials_from_epay(amount=None):
    if not EPAY_API_KEY:
        app.logger.warning("EPAY API key not configured")
        return None
    
    try:
        data = {
            'amount': str(amount) if amount else '1000',
            'merchant_order_id': 'optional',
            'api_key': EPAY_API_KEY,
            'notice_url': f"{BASE_URL}/callback",
            'success_url': f"{BASE_URL}/success",
            'fail_url': f"{BASE_URL}/fail"
        }
        
        response = requests.post(EPAY_API_URL, data=data, timeout=30)
        app.logger.info(f"EPay API response: {response.status_code} - {response.text}")
        
        if response.status_code == 200:
            return response.json()
        else:
            app.logger.error(f"EPAY API error: {response.status_code} - {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        app.logger.error(f"EPAY API request failed: {e}")
        return None

def format_payment_credentials_from_epay(payment_data):
    try:
        order_id = payment_data.get('order_id', 'N/A')
        amount = payment_data.get('amount', 'N/A')
        
        receiver_wallet_str = ""
        
        if payment_data.get('card_number'):
            receiver_wallet_str = f"<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>: <code>{payment_data['card_number']}</code>"
        elif payment_data.get('qr_sbp_url') or payment_data.get('card_form_url'):
            url = payment_data.get('qr_sbp_url') or payment_data.get('card_form_url')
            receiver_wallet_str = f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>: <a href='{url}'>{url}</a>"
        
        text = f"üìÑ <b>–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑</b>: ‚Ññ{order_id}\n\n"
        text += f"üí≥ {receiver_wallet_str}\n"
        text += f"üí∞ <b>–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞</b>: <code>{amount}</code> ‚ÇΩ\n\n"
        text += f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É</b>: 20 –º–∏–Ω"
        
        return text
        
    except Exception as e:
        app.logger.error(f"Error formatting payment data: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

def handle_successful_payment(transaction_id):
    try:
        orders_file = "orders.txt"
        
        if os.path.exists(orders_file):
            with open(orders_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            for line in lines:
                parts = line.strip().split('|')
                if len(parts) >= 4 and int(parts[1]) == int(transaction_id):
                    chat_id = int(parts[2])
                    send_message(chat_id, f'‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É {transaction_id}!')
                    break
                    
    except Exception as e:
        app.logger.error(f"Error handling successful payment: {e}")

def get_static_payment_credentials():
    return """<b>üí≥ –†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´:</b>

<b>üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞:</b>
‚Ä¢ –ù–æ–º–µ—Ä: <code>1234 5678 9012 3456</code>
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <code>12/25</code>
‚Ä¢ CVV: <code>123</code>
‚Ä¢ –ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è: <code>IVAN IVANOV</code>

<b>üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b>
‚Ä¢ Bitcoin (BTC): <code>bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh</code>
‚Ä¢ Ethereum (ETH): <code>0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6</code>

<b>üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:</b>
‚Ä¢ PayPal: <code>payment@example.com</code>
‚Ä¢ WebMoney: <code>R123456789012</code>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π!"""

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))